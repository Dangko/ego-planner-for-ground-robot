class update_joy_Joy_e3ef016fcdf22397038b36036c66f7c8(MessageUpdateRule):
	old_type = "joy/Joy"
	old_full_text = """
float32[] axes
int32[] buttons
"""

	new_type = "sensor_msgs/Joy"
	new_full_text = """
# Reports the state of a joysticks axes and buttons.
Header header           # timestamp in the header is the time the data is received from the joystick
float32[] axes          # the axes measurements from a joystick
int32[] buttons         # the buttons measurements from a joystick 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""

	order = 0
	migrated_types = []

	valid = True

	def update(self, old_msg, new_msg):
		#No matching field name in old message
		new_msg.header = self.get_new_class('Header')()
		new_msg.axes = old_msg.axes
		new_msg.buttons = old_msg.buttons
